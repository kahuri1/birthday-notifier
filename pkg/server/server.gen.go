// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt string `json:"created_at"`
	Id        int    `json:"id"`
	UpdatedAt string `json:"updated_at"`
	UserId    int    `json:"user_id"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse struct {
	Status int32  `json:"status"`
	Title  string `json:"title"`
}

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse struct {
	Status int32  `json:"status"`
	Title  string `json:"title"`
}

// UserSubscriptionsV1Response defines model for UserSubscriptionsV1Response.
type UserSubscriptionsV1Response struct {
	Subscriptions []Subscription `json:"subscriptions"`
}

// PostUserCreateV1RequestBody defines model for PostUserCreateV1RequestBody.
type PostUserCreateV1RequestBody struct {
	// Birthdate Дата рождения пользователя
	Birthdate string `json:"birthdate"`

	// Email E-mail пользователя
	Email string `json:"email"`

	// Name Имя пользователя
	Name string `json:"name"`

	// TelegramId Имя пользователя в Telegram
	TelegramId *string `json:"telegram_id,omitempty"`
}

// PostUserSubscribeV1RequestBody defines model for PostUserSubscribeV1RequestBody.
type PostUserSubscribeV1RequestBody struct {
	UserId int `json:"user_id"`
}

// UserCreateV1JSONBody defines parameters for UserCreateV1.
type UserCreateV1JSONBody struct {
	// Birthdate Дата рождения пользователя
	Birthdate string `json:"birthdate"`

	// Email E-mail пользователя
	Email string `json:"email"`

	// Name Имя пользователя
	Name string `json:"name"`

	// TelegramId Имя пользователя в Telegram
	TelegramId *string `json:"telegram_id,omitempty"`
}

// UserSubscribeV1JSONBody defines parameters for UserSubscribeV1.
type UserSubscribeV1JSONBody struct {
	UserId int `json:"user_id"`
}

// UserCreateV1JSONRequestBody defines body for UserCreateV1 for application/json ContentType.
type UserCreateV1JSONRequestBody UserCreateV1JSONBody

// UserSubscribeV1JSONRequestBody defines body for UserSubscribeV1 for application/json ContentType.
type UserSubscribeV1JSONRequestBody UserSubscribeV1JSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание нового пользователя
	// (POST /user)
	UserCreateV1(c *gin.Context)
	// Подписка на уведомления
	// (POST /user/{id}/subscribe)
	UserSubscribeV1(c *gin.Context, id int64)
	// Получение списка подписок пользователя
	// (GET /user/{id}/subscriptions)
	UserSubscriptionsV1(c *gin.Context, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UserCreateV1 operation middleware
func (siw *ServerInterfaceWrapper) UserCreateV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserCreateV1(c)
}

// UserSubscribeV1 operation middleware
func (siw *ServerInterfaceWrapper) UserSubscribeV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSubscribeV1(c, id)
}

// UserSubscriptionsV1 operation middleware
func (siw *ServerInterfaceWrapper) UserSubscriptionsV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSubscriptionsV1(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/user", wrapper.UserCreateV1)
	router.POST(options.BaseURL+"/user/:id/subscribe", wrapper.UserSubscribeV1)
	router.GET(options.BaseURL+"/user/:id/subscriptions", wrapper.UserSubscriptionsV1)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWb2vcxhP+KmJ/P+gb+STZpiR61TqkkDcmOG6hDSasT3v2Bkmr7q7cGiPwn9JSWgiU",
	"vsi7tt/gcO6ai/8oX2H2G5Vd6c7SSXdWnKa0YA55pdmZeeaZeeYI9VmUsJjEUiD/CHHydUqE3GABJebg",
	"MRPyc0H4A06wJF94W7MPDvXrPosliaV+xEkS0j6WlMXOc8FifSb6+yTC+inhLCFclrfuUi73AyyJ/icg",
	"os9pog2Rj+BXGKpTGFrqGHL4E0YwhmuYqBcWvIUcLtXP8BpyODdfjeFSvUA2It/iKAkJ8pF3/7674nor",
	"rodsJA8TfSYkp/EeymxEIkzDps+HK/q8mwNJhPxE//T6LGrzEeOoLa2XcNU1B3ipX8F12+2ShGSP4+gZ",
	"Dd7ZiQXn1nZp38ipp3+aHjPbcIJyEiD/aQmgXSlgmfDOzJLtPid9iTJtOhfe7zCGVzBRJ+pUHcNQfV/U",
	"9dqEmcMryJcBdBOH5CnJ7Bk3n6S72s3u30bPVBBeAjwDyZslSGNJ9ghvYDO16gTFb5DDCN5qMOAChhqE",
	"oaXO4BzGMIIcruBySvxm6saxSFgsing3cFAmvlUev0fyQmKZioJcA5yGEvnrrmujAeMRlkX+a6uoCYeN",
	"JJUhqaGGvmQpt8qpYiWY44hIwoUV0CD+SFoHOKSaRr1bmVfcbU/D6wJyCyyZjTaZ/IylcfChoFq/K1Sa",
	"ylbMpDXQ4X0IQBqpZzaqNJD5TOgmen9kqjfqAypJZB7+z8kA+eh/zo3wOMUtwqnGYUAqEsKc48NG/nUX",
	"XdJflqr+ugxDR1mLpFqlp0eob6QweGYqvOqueoXebLuub/6+QjbSw8OzUZoEt346GzZetmPPwVh1VaXK",
	"gqsaanH7DKvHeBcfdxuWNKikblcTrUXUXlYaD1hT/T59/MiCkRE6ddxUGpgsEBcYwxtLv72GYWmQwxu4",
	"gAma9SnaKATv0Npkkg4o4dbWwyfblvZZ9oCNDggXRShez+25GhyWkBgnFPloref21pCNEiz3TW0dnb3p",
	"HCZki5bXxXKijtUZjNWpFnF1UpzDGK5g3FlANbNM+z4Kym6YbnWlxFSUs61Na8uhs2wznBeoVddrZrjJ",
	"rAfldMlstO66i/2WVzltE103bhpFmB9q1P6AHF7DSK9PMOmMjb7E1MM5okHmiOlCsaQ8FQFXP5l9zRRn",
	"4eq1VN+blansNIY0U+E0E6ix9ZklWZ3CRH0HE71PqFPI1fEyMlBtqsk43eD8oifrq4ZdmfBVVft4vUXV",
	"9Py6M40WLHH/JJO06frtpk0VrVPwXVa7duLdyOYeaePeL4bk52ay/VgyT52ULnO4KOo+mj/oOhXmNPI/",
	"xr8aWTowYelW8O9g06U6Uz8UnIHxTaUNuTpX2iinIPxgWsWUh8hH+1ImvuOErI/DfSakf8+95zo4oc43",
	"ZNc58FC2k/0VAAD///HR/WkmEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
